##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.19.2] date: [Sat Sep 02 18:56:37 CST 2023] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
BOARD ?= at32f421_v1_0
TARGET = $(BOARD)
MCU_FAMILY = at32f421
DEVICE = at32f421x8
FLASH_SIZE = 64k
RAM_SIZE = 16k
HEAP_SIZE = 0XC00
STACK_SIZE = 0X400

#######################################
# download script
#######################################
DOWNLOAD_SCRIP = "script/jlink-download.sh"

#######################################
# link script
#######################################

LDSCRIPT := linker/$(MCU_FAMILY)_flash.ld

######################################
# building variables
######################################
# debug build?
DEBUG ?= 1

#######################################
# paths
#######################################
# Build output directory
BUILD_DIR = build

######################################
# source
######################################
APP_LAYER_DIR = src/app
MTR_LAYER_DIR = src/motor
PRO_LAYER_DIR = src/protocol
MSP_LAYER_DIR = src/msp
START_UP_DIR = src/startup/$(MCU_FAMILY)
BOARD_DEF_DIR = src/board

APP_LAYER_INCLUDE  = $(BOARD_DEF_DIR) $(APP_LAYER_DIR) $(MTR_LAYER_DIR) $(MSP_LAYER_DIR) $(PRO_LAYER_DIR)
PRO_LAYER_INCLUDE  = $(BOARD_DEF_DIR) $(PRO_LAYER_DIR) $(PRO_LAYER_DIR)/src $(MSP_LAYER_DIR) $(MTR_LAYER_DIR)
MTR_LAYER_INCLUDE  = $(BOARD_DEF_DIR) $(MTR_LAYER_DIR) $(MTR_LAYER_DIR)/src $(MSP_LAYER_DIR)
MSP_LAYER_INCLUDE  = $(MSP_LAYER_DIR) $(MSP_LAYER_DIR)/src/$(MCU_FAMILY) $(MSP_LAYER_DIR)/src/$(MCU_FAMILY)/stdlib src/msp/src/cm4

SOURCES_DIR = $(START_UP_DIR) $(APP_LAYER_DIR) $(MTR_LAYER_DIR)/src $(PRO_LAYER_DIR)/src $(MSP_LAYER_DIR)/src $(MSP_LAYER_DIR)/src/$(MCU_FAMILY) $(MSP_LAYER_DIR)/src/$(MCU_FAMILY)/stdlib

SOURCES = $(wildcard $(foreach i,$(SOURCES_DIR),$(i)/*.c $(i)/*.cpp $(i)/*.s))

OBJECTS  = $(addsuffix .o,$(basename $(SOURCES:src/%=%)))

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
CXX = $(GCC_PATH)/$(PREFIX)g++
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
CXX = $(PREFIX)g++
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = 

# float-abi
FLOAT-ABI = 

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
	-DAT32F421G8U7 \
	-DUSE_STDPERIPH_DRIVER \
	-DAT_START_F421_V1 \
	-DUSE_PA_RFPA5542 \
	-DUSE_RTC6705

# AS includes
AS_INCLUDES = 


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
CFLAGS += $(MCU) $(C_DEFS) $(OPT) -Wall -fdata-sections -ffunction-sections -D$(BOARD)

ifeq ($(DEBUG), 1)
CFLAGS += -Og -g -gdwarf-2
else
CFLAGS += -O3 -DNDEBUG
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# LDFLAGS
#######################################

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections #-u _printf_float
# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin

define make_build_dir
	@if [ ! -d `dirname $(1)` ]; then mkdir -p `dirname $(1)`; fi
endef

define get_include_dir
	@case $(1) in \
		*app/*) INCLUDE_DIR="$(foreach i,$(APP_LAYER_INCLUDE),-I$(i))";; \
		*motor/*) INCLUDE_DIR="$(foreach i,$(MTR_LAYER_INCLUDE),-I$(i))";; \
		*msp/*) INCLUDE_DIR="$(foreach i,$(MSP_LAYER_INCLUDE),-I$(i))";; \
		*protocol/*) INCLUDE_DIR="$(foreach i,$(PRO_LAYER_INCLUDE),-I$(i))";; \
		*) echo "#######  error object: $(1) ########" ;; \
	esac; echo -n $${INCLUDE_DIR} > $(BUILD_DIR)/$(dir $(1))/$(notdir $(1)).inc
endef

$(BUILD_DIR)/%.o: src/%.c Makefile
	$(call make_build_dir,$@)
	$(call get_include_dir,$*)
	$(CC) $(CFLAGS) `cat $(dir $@)/$(notdir $*).inc` -c $< -o $@

$(BUILD_DIR)/%.o: src/%.cpp Makefile
	$(call make_build_dir,$@)
	$(call get_include_dir,$*)
	$(CXX) $(CFLAGS) `cat $(dir $@)/$(notdir $*).inc` -c $< -o $@
	
$(BUILD_DIR)/%.o: src/%.s Makefile
	$(call make_build_dir,$@)
	$(AS) -c $(CFLAGS) $< -o $@

#######################################
# build the application
#######################################
# list of objects
$(LDSCRIPT): Makefile
	@sed -i "s/^FLASH_SIZE = .*/FLASH_SIZE = $(FLASH_SIZE);/" $(LDSCRIPT)
	@sed -i "s/^RAM_SIZE = .*/RAM_SIZE = $(RAM_SIZE);/" $(LDSCRIPT)
	@sed -i "s/^_Min_Heap_Size = .*/_Min_Heap_Size = $(HEAP_SIZE);/" $(LDSCRIPT)
	@sed -i "s/^_Min_Stack_Size = .*/_Min_Stack_Size = $(STACK_SIZE);/" $(LDSCRIPT)

$(BUILD_DIR)/$(TARGET).elf: $(addprefix $(BUILD_DIR)/,$(OBJECTS)) $(LDSCRIPT)
	$(CXX) $(addprefix $(BUILD_DIR)/,$(OBJECTS)) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf
	$(BIN) $< $@	
	

#######################################
# clean up
#######################################
clean:
	-rm -rf $(BUILD_DIR)

#######################################
# download to mcu
#######################################
download: $(BUILD_DIR)/$(TARGET).hex
	@echo start flashing......
	@bash $(DOWNLOAD_SCRIP) $(DEVICE) $(BUILD_DIR)/$(TARGET).hex

#######################################
# list all the target board suppported
#######################################
list:
	@echo support target board list:
	@for i in `ls src/board`; do tmp=$${i#board}; tmp=$${tmp#_}; echo "    $${tmp%.h}"; done


#######################################
# dependencies
#######################################
-include $(shell find $(BUILD_DIR) -name *.d)